#+TITLE: Doom Config
#+PROPERTY: header-args:elisp :tangle config.el :cache yes :results silent :padline no
#+EXPORT_FILE_NAME: README.md
#+STARTUP: content
#+SETUPFILE: ~/Dropbox/org/org-roam/setup_file.org
# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

#+begin_src elisp
;;; config.el --- -*- lexical-binding: t -*-
#+end_src

* Personal Information
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+BEGIN_SRC elisp
(setq user-full-name "Christoffer Arvidsson"
      user-mail-address "christoffer@arvidson.nu")
#+END_SRC

** Mail handling
Use mu4e as mail handler, this loads from gmail. Each path is relative to
=+mu4e-mu4e-mail-path=, which is =~/.mail= by default
#+begin_src elisp

(after! mu4e
  (setq +mu4e-mu4e-mail-path "~/Mail/")
  (set-email-account! "arvidson.nu"
                      '((mu4e-sent-folder       . "/[Gmail].Sent Mail")
                        ;; (mu4e-drafts-folder     . "/[Gmail].Drafts")
                        ;; (mu4e-trash-folder      . "/[Gmail].Sent Mail")
                        (mu4e-refile-folder     . "/[Gmail].All Mail")
                        (smtpmail-smtp-user     . "christoffer@arvidson.nu")
                        (mu4e-compose-signature . "---\nChristoffer Arvidsson"))
                      t))
#+end_src

* UI
** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. Here we set the doom-horizon theme.

#+begin_src elisp
(use-package! doom-themes
  :config
  ;; Global settings (defaults)

  (setq doom-themes-enable-bold t      ; if nil, bold is universally disabled
        doom-themes-enable-italic t    ; if nil, italics is universally disabled
        )

  (setq doom-theme 'doom-horizon)

  ;; Treemacs
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

The following changes the color of org mode blocks (src, example, quote etc.) to be more obvious by darkening them.
#+begin_src elisp
(after! org
  (after! doom-themes
    (set-face-background 'org-block (doom-darken 'bg 0.15))
    (set-face-background 'org-block-begin-line (doom-darken 'bg 0.15))
  )
)
#+end_src

** Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src elisp
(setq doom-font (font-spec :family "iosevka" :size 18))
#+end_src
* Editor
** Line numbers
Relative line numbers allows using relational vim bindings, ie. =10k= to move 10 lines up, for example. Enable this to get better at using them.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
** Completion
Completion settings.
#+begin_src elisp
(require 'company)
(setq company-idle-delay 0.0
      company-minimum-prefix-length 1)
#+end_src
** Evil moton
#+begin_src elisp
(after! evil-easymotion
  (put 'visible-buffer 'bounds-of-thing-at-point (lambda () (cons (window-start) (window-end))))
  (evilem-make-motion evilem-motion-forward-word-begin #'evil-forward-word-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-WORD-begin #'evil-forward-WORD-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-word-end #'evil-forward-word-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-forward-WORD-end #'evil-forward-WORD-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-word-begin #'evil-backward-word-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-word-end #'evil-backward-word-end :scope 'visible-buffer)
  (evilem-make-motion evilem-motion-backward-WORD-end #'evil-backward-WORD-end :scope 'visible-buffer))
#+end_src
** Evil snipe
Make evil snipe jumpy into easymotion
#+begin_src elisp
#+end_src

** Treemacs
Configure treemacs
#+begin_src elisp
(after! treemacs
  (setq treemacs-use-follow-mode t
        treemacs-use-filewatch-mode t
        treemacs-use-collapsed-directories 3))
(map! "S-<backspace>" 'treemacs)
#+end_src

** Expand region
[[https://github.com/magnars/expand-region.el][Expand region]] allows pressing =<leader> v v v v v...= repeatedly to expand the
visual mode from current point. For example, if your cursor is within the curly
brackets, you can select everything within the parenthesis in =(Hello my name is
{name})= by pressing =leader v v v=.
#+begin_src elisp
(map! :leader "v" 'er/expand-region)
#+end_src

* Mode config
#+include: "~/.doom.d/+org.org"
** Magit
Bring back the sidebuffer for magit.
#+begin_src elisp
(set-popup-rule! "\\^*magit" :side 'right :width 0.4)
#+end_src

** Latex
I don't really edit latex anymore, so not sure why this is here.
#+BEGIN_SRC elisp
(after! latex
  (set-company-backend! 'latex-mode t)
  (setq-default TeX-master 'nil)) ; Ask for master file on latexmk
#+END_SRC
** Python
Configure python
#+begin_src elisp
(map! :map python-mode-map
      :localleader
      "c" 'python-shell-send-buffer
      "r" 'run-python)
#+end_src
** Dired
*** Ranger
Automatically use ranger when using dired.
#+begin_src elisp
(after! ranger
  (setq ranger-override-dired 'ranger))
#+end_src

* Bindings
Collection of nice bindings I use throughout the emacs journey.
#+BEGIN_SRC elisp
(map! :leader
      "TAB" 'evil-switch-to-windows-last-buffer ; Switch to last buffer
      "f w" 'find-file-other-window
      "o c" 'quick-calc
      "o C" 'calc
      "i p" 'academic-phrases
      "i P" 'academic-phrases-by-section)
#+END_SRC
