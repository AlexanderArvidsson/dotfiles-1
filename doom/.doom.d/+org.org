#+PROPERTY: header-args:elisp :cache yes :results silent :padline no

# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

* Keybindings
#+begin_src elisp
(map! :map org-mode-map
      :leader
      "t t" 'toggle-truncate-lines
      )
#+end_src

* General org settings
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+BEGIN_SRC elisp
(setq org-directory "~/Dropbox/org/")
(setq org-capture-todo-file "~/Dropbox/org/agenda.org")
#+END_SRC

#+begin_src elisp
(after! org
  ;; Visual stuff
  (setq org-pretty-entities nil
        org-hide-emphasis-markers t
        org-startup-with-inline-images "inlineimages"
        org-fontify-whole-heading-line t
        org-src-fontify-natively t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        org-startup-truncated nil) ;; Force org to not truncate lines

  (setq org-latex-prefer-user-labels t)

  )
#+end_src

* File handling
This controls what is used to open links in org documents. Since there are only
a few defaults defined, I am just prepending them to my changes instead of
dealing with append and stuff.

#+begin_src elisp
(after! org
  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "zathura %s")
          ("\\.png\\'" . viewnior)
          ("\\.jpg\\'" . viewnior)
          ("\\.svg\\'" . viewnior)
          )))
#+end_src

* Org download
Org download allows me to screenshot regions of my screen directly into org mode
buffers. It is useful for grabbing images during lectures, etc.

Change screenshot backend of org-download (it now uses xfce4-screenshooter,
which does not have ugly borders that scrot has).
#+begin_src elisp
(after! org-download
  (setq org-download-screenshot-method "xfce4-screenshooter -r -o cat > %s")
  (setq org-download-method 'directory))
#+end_src

* Notebooking and babel
** Keybindings
#+begin_src elisp
(after! org
  (map! :leader "m k s" 'org-babel-demarcate-block)
  )
#+end_src

** Jupyter emacs
Bread and butter for using python in org-mode for notebook style execution.

Make a template for inserting jupyter blocks.
#+begin_src elisp
(after! org
  (setq org-babel-python-command "~/.pyenv/shims/python")
  (add-to-list 'org-structure-template-alist
               '("j" . "src jupyter-python"))

  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:kernel . "python3")
                                                       (:exports . "code")
                                                       (:session . "py")
                                                       (:eval . "never-export")))
  )
#+end_src

** Org auto tangle
Automatically tangle src blocks on save. Makes working with literate programming very nice since code is always up to date in tangled files.
#+begin_src elisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))
#+end_src

* Productivity
** Agenda
*** General settings
#+begin_src elisp
(after! org
  (setq! org-agenda-files (list "~/Dropbox/org/agenda.org")
         +org-capture-todo-file "agenda.org"))
#+end_src

*** Super agenda
#+begin_src elisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Assignments"
                           :tag "assignment"
                           :order 10)
                          (:name "Issues"
                           :tag "issue"
                           :order 12)
                          (:name "Emacs"
                           :tag "emacs"
                           :order 13)
                          (:name "Projects"
                           :tag "project"
                           :order 14)
                          (:name "Research"
                           :tag "research"
                           :order 15)
                          (:name "To read"
                           :tag "read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:name "University"
                           :tag "uni"
                           :order 32)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("trivial" "unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("chore" "routine" "daily")))))))))))
#+end_src
*** Capture templates
Capture templates to easier file different tasks into the agenda file
#+begin_src elisp
(after! org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* [ ] %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry
           (file+headline +org-capture-notes-file "Inbox")
           "* %u %?\n%i\n%a" :prepend t)
          ("r" "Research" entry
           (file+headline +org-capture-todo-file "Research")
           "* %u %?\n%i\n%a" :prepend t)
          ("u" "University" entry
           (file+headline +org-capture-todo-file "University")
           "* [ ] %u %?\n%i\n%a" :prepend t)

          ("p" "Templates for projects")
          ("pt" "Project todo" entry
           #'+org-capture-central-project-todo-file "* [ ] %?\n %i\n %a" :heading "Tasks" :prepend nil)
          ("pn" "Project notes" entry
           #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :heading "Notes" :prepend t)
          ("pc" "Project changelog" entry
           #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :heading "Changelog" :prepend t))))
#+end_src

*** TODO Setup alerts
** Elfeed
Read your rss in emacs!
#+begin_src elisp
(map! :leader "o f" 'elfeed)

(after! elfeed-org
  (elfeed-org)
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  (setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed/elfeed.org"))

  (use-package! elfeed-link)

  (setq elfeed-search-filter "@1-week-ago"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (setq-local truncate-lines nil)
      (setq-local shr-width 120)
      (setq-local line-spacing 0.2)
      (setq-local visual-fill-column-center-text t)
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (setq-local line-spacing 0.2)))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))
  )
#+end_src

* Writing
** Spell optimization
Speedup spell in org mode
#+begin_src elisp
(after! spell
  (remove-hook 'mu4e-compose-mode-hook #'org-mu4e-compose-org-mode()
               (setq enable-flyspell-auto-completion t)
               ))
#+end_src
** Org roam
I transferred to org-roam after I realized I hated hierarchical documents. Ideas
apply to many different subjects, which org-roam handles very well. This block
setups org-roam and enables it.
#+begin_src elisp
(use-package! org-roam
  :defer t
  :config
  (setq org-roam-directory "~/Dropbox/org/org-roam")
  (setq org-roam-db-location "~/Dropbox/org/org-roam/org-roam.db")
  (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+end_src

Setup capture templates for org-roam. I made these load from template files for faster editing.
#+begin_src elisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("l" "latex")
          ("ld" "temporary note" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/draft.org")
           :file-name "draft/%<%Y%m%d%H%M%S>-${slug}"
           :unnarrowed t)
          ("ll" "lecture note" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/lecture_note.org")
           :file-name "lecture/%<%Y%m%d%H%M%S>-${slug}"
           :unnarrowed t)
          ("lp" "permanent note" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/latex.org")
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :unnarrowed t)
          ("la" "assignment" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/latex.org")
           :file-name "assignment/%<%Y%m%d%H%M%S>-${slug}"
           :unnarrowed t)
          ("le" "exercise" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/exercise.org")
           :file-name "exercise/%<%y%m%d%h%m%s>-${slug}"
           :unnarrowed t)
          ("p" "project" plain (function org-roam-capture--get-point)
           (file "/home/eethern/.doom.d/templates/project.org")
           :file-name "project/${slug}/README"
           :unnarrowd t)
           )
          )
        )
#+end_src

And for dailies
#+begin_src elisp
(after! org-roam
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           #'org-roam-capture--get-point
           "* %?"
           :file-name "daily/%<%Y-%m-%d>"
           :head "#+title: %<%Y-%m-%d>\n\n#+ROAM_TAGS: Dailies\n"
           ))))
#+end_src

Setup org roam server. This does some nice styling and physics simulations to
make the graph view much nicer.

#+begin_src elisp
(after! org-roam-server
  (require 'json)
  (setq org-roam-server-network-vis-options
        (json-encode (list
                      (cons 'physics
                            (list
                             (cons 'enabled t)
                             (cons 'stabilization
                                   (list
                                    (cons 'enabled t)
                                    (cons 'iterations 10)
                                    (cons 'fit t)))
                             (cons 'timestep 1.0)
                             (cons 'maxVelocity 20)
                             (cons 'solver "barnesHut")
                             ;; (cons 'repulsion
                             ;;       (list
                             ;;        (cons 'nodeDistance 400)
                             ;;        (cons 'centralGravity 0.5)
                             ;;        (cons 'springLength 100)
                             ;;        (cons 'springConstant 0.05)
                             ;;        (cons 'damping 0.5)))))
                             (cons 'barnesHut
                                   (list
                                    (cons 'theta 0.5)
                                    (cons 'graviationalConstant -500000)
                                    (cons 'centralGravity 0.1)
                                    (cons 'springLength 1000)
                                    (cons 'springConstant 0.01)
                                    (cons 'damping 0.1)
                                    (cons 'avoidOverlap 0)))))
                      (cons 'edges
                            (list
                             (cons 'physics t)
                             (cons 'length 20)
                             (cons 'width 0.15)
                             (cons 'hidden json-false)
                             (cons 'smooth
                                   (list
                                    (cons 'enabled t)
                                    (cons 'type "continuous")))
                             (cons 'color
                                   (list
                                    (cons 'border "#ffffff")
                                    (cons 'background "#ffffff")
                                    (cons 'highlight "#6f5ecc")
                                    (cons 'hover "#6f5ecc")))))
                      (cons 'nodes
                            (list
                             (cons 'mass 2)
                             (cons 'font
                                   (list
                                    (cons 'size 16)))
                             (cons 'color
                                   (list
                                    (cons 'border "#222222")
                                    (cons 'background "#bbbbbb")
                                    (cons 'highlight "#6f5ecc")
                                    (cons 'hover "#6f5ecc")))))
                      (cons 'options
                            (list
                             (cons 'highlight-nearest
                                   (list
                                    (cons 'enabled t)
                                    (cons 'degree 2))))))))
  )
#+end_src

*** Bibliography
Setup org-roam-bibtex
#+begin_src elisp
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here
#+end_src

** Org ref
Manage references using org-ref.
#+begin_src elisp
(after! org
  (setq reftex-default-bibliography "/home/eethern/Dropbox/bibliography/references.bib")
  (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
        org-ref-default-bibliography (list "/home/eethern/Dropbox/bibliography/references.bib")
        org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")

  (setq org-ref-completion-library 'org-ref-ivy-cite)
  (map! :map org-mode-map :localleader
        :desc "Insert org-ref reference link"
        "l r" 'org-ref-insert-ref-link)

                                        ; Makes org-ref reload its completion on save rather than just on buffer reload
  (add-hook 'after-save-hook (lambda ()
                               (setq org-ref-labels nil))))
#+end_src

** Org fragtog - Automate latex inline rendering
An annoying thing about latex equations in org mode is that you have to toggle
them to display and undisplay images. org-fragtog only shows the latex code if
you hover over. Also make the equations bigger scale with text scaling

#+begin_src elisp
(after! org
  (add-hook! org-mode org-fragtog-mode)

                                        ; Scale depending on zoom level
  (defun update-org-latex-fragment-scale ()
    (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 1.5 text-scale-factor)))
    )
  (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)
  )
#+end_src

** Org appear
Use org-appear to reveal emphasis markers when moving the cursor over them.
#+begin_src elisp
(after! org
  (add-hook! org-mode :append #'org-appear-mode)
  )
#+end_src

** Latex export
Export minted latex source code in pdf, using latexmk.

#+begin_src elisp
(after! org
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  (setq org-src-fontify-natively t)
  )

#+end_src

Although I want to not evalaute src blocks on export, settings the following
option to nil makes org disregard header arguments such as =:exports=, which for
me makes this completely unusable. Instead, I use =:eval never-export= in large
runtime org files.
#+begin_src elisp
(after! org
  (setq org-export-use-babel t)
  )
#+end_src

** Inline image size
Make large images not take up entire buffer
#+begin_src elisp
(after! org
  (setq org-image-actual-width nil))
#+end_src
** Cdlatex
Makes math more bearable in org-mode, therefore activate it.
#+begin_src elisp
(after! org
  (add-hook 'org-mode-hook #'org-cdlatex-mode))
#+end_src
